################
# lsp-ai setup #
################

[language-server.lsp-ai]
# TIL command = i.e., this is the command you would run in your shell
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[language-server.lsp-ai.config.models.haiku]
type = "anthropic"
chat_endpoint = "https://api.anthropic.com/v1/messages"
model = "claude-3-5-haiku-20241022"
auth_token_env_var_name = "ANTHROPIC_API_KEY"

[[language-server.lsp-ai.config.chat]]
trigger = "!C"
action_display_name = "Chat"
model = "haiku"

[language-server.lsp-ai.config.chat.parameters]
max_context = 4096
max_tokens = 2048
# NOTE(docs): According to anthropic docs
# Prompts with a user role have a improved responses with higher accuracy
system = "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately"

[[language-server.lsp-ai.config.actions]]
action_display_name = "Complete"
model = "haiku"
parameters = { max_content = 4096, max_tokens = 4096, system = "You are an AI coding assistant. Your task is to complete code snippets. The user's cursor position is marked by \"<CURSOR>\". Follow these steps:\n\n1. Analyze the code context and the cursor position.\n2. Provide your chain of thought reasoning, wrapped in <reasoning> tags. Include thoughts about the cursor position, what needs to be completed, and any necessary formatting.\n3. Determine the appropriate code to complete the current thought, including finishing partial words or lines.\n4. Replace \"<CURSOR>\" with the necessary code, ensuring proper formatting and line breaks.\n5. Wrap your code solution in <answer> tags.\n\nYour response should always include both the reasoning and the answer. Pay special attention to completing partial words or lines before adding new lines of code.", messages = [ { role = "user", content = "{CODE}" } ] }
post_process = { extractor = "(?s)<answer>(.*?)</answer>" }

[[language-server.lsp-ai.config.actions]]
action_display_name = "Refactor"
model = "haiku"
parameters = { max_content = 4096, max_tokens = 4096, system = "You are an AI coding assistant specializing in code refactoring. Your task is to analyze the given code snippet and provide a refactored version. Follow these steps:\n\n1. Analyze the code context and structure.\n2. Identify areas for improvement, such as code efficiency, readability, or adherence to best practices.\n3. Provide your chain of thought reasoning, wrapped in <reasoning> tags. Include your analysis of the current code and explain your refactoring decisions.\n4. Rewrite the entire code snippet with your refactoring applied.\n5. Wrap your refactored code solution in <answer> tags.\n\nYour response should always include both the reasoning and the refactored code.\n\n<examples>\n<example>\nUser input:\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total = total + item['price'] * item['quantity']\n    return total\n\n\nResponse:\n<reasoning>\n1. The function calculates the total cost of items based on price and quantity.\n2. We can improve readability and efficiency by:\n   a. Using a more descriptive variable name for the total.\n   b. Utilizing the sum() function with a generator expression.\n   c. Using augmented assignment (+=) if we keep the for loop.\n3. We'll implement the sum() function approach for conciseness.\n4. We'll add a type hint for better code documentation.\n</reasoning>\n<answer>\nfrom typing import List, Dict\n\ndef calculate_total(items: List[Dict[str, float]]) -> float:\n    return sum(item['price'] * item['quantity'] for item in items)\n</answer>\n</example>\n\n<example>\nUser input:\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nResponse:\n<reasoning>\n1. This function checks if a number is prime, but it's not efficient for large numbers.\n2. We can improve it by:\n   a. Adding an early return for 2, the only even prime number.\n   b. Checking only odd numbers up to the square root of n.\n   c. Using a more efficient range (start at 3, step by 2).\n3. We'll also add a type hint for better documentation.\n4. The refactored version will be more efficient for larger numbers.\n</reasoning>\n<answer>\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n</answer>\n</example>\n</examples>", messages = [ { role = "user", content = "{SELECTED_TEXT}" } ] }
post_process = { extractor = "(?s)<answer>(.*?)</answer>" }


[[language-server.lsp-ai.config.actions]]
action_display_name = "Fix ESLINT"
model = "haiku"
parameters = { max_content = 4096, max_tokens = 4096, system = "You are an AI coding assistant specializing in code refactoring. Your job is to analyze the selected text in constext and consider the eslint error in the diagnostics and rewrite the line or lines to fix the eslint rule. Do this as concisely as possible. If one line is selected, most likely the anser is also one line. Replace the selected text with the answer. Wrap your refactored code solution in <answer> tags.\n\nYour response should always include both the reasoning and the refactored code. ", messages = [ { role = "user", content = "{SELECTED_TEXT}" } ] }
post_process = { extractor = "(?s)<answer>(.*?)</answer>" }


################################
# Language setup for file type #
################################
[[language]]
name = "markdown"
language-servers = ["lsp-ai"]

[[language]]
name = "javascript"
file-types = ["js", "mjs"]
language-servers = [ "typescript-language-server", "vscode-eslint-language-server" ]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "typescript"
file-types = ["ts"]
language-servers = [ "typescript-language-server", "lsp-ai", "vscode-eslint-language-server"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "emmet-lsp", "tailwindcss-ls", "vscode-eslint-language-server", "vscode-html-language-server"  ]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "tsx"
file-types = ["tsx"]
language-servers = [ "typescript-language-server", "emmet-lsp", "lsp-ai", "tailwindcss-ls", "vscode-eslint-language-server", "vscode-html-language-server" ]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "tailwindcss-ls" ]

[[language]]
name = "html"
roots = [".git"]
language-servers = [ "vscode-html-language-server", "emmet-lsp", "tailwindcss-ls" ]

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = false
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = false
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true


